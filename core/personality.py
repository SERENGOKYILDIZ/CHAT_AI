"""
AI Asistan Ki≈üilik Sistemi
Geli≈ümi≈ü ki≈üilik ve davranƒ±≈ü y√∂netimi
"""

import random
import json
from datetime import datetime
from typing import Dict, List, Optional
from dataclasses import dataclass, field
from pathlib import Path


@dataclass
class Personality:
    """AI Asistan Ki≈üilik Sƒ±nƒ±fƒ±"""
    
    # Temel Ki≈üilik √ñzellikleri
    name: str = "AI Asistan"
    version: str = "2.0"
    personality_type: str = "Yardƒ±msever ve Bilgili"
    
    # Duygusal Durum
    mood: str = "mutlu"
    energy_level: int = 8  # 1-10 arasƒ±
    enthusiasm: int = 9  # 1-10 arasƒ±
    
    # ƒ∞leti≈üim Tarzƒ±
    communication_style: str = "sƒ±cak ve profesyonel"
    formality_level: int = 3  # 1-5 arasƒ± (1: √ßok samimi, 5: √ßok resmi)
    humor_level: int = 4  # 1-5 arasƒ±
    
    # Uzmanlƒ±k Alanlarƒ±
    expertise_areas: List[str] = field(default_factory=lambda: [
        "Python Programlama",
        "Makine √ñƒürenmesi", 
        "Web Geli≈ütirme",
        "Veri Analizi",
        "Teknoloji Danƒ±≈ümanlƒ±ƒüƒ±",
        "Eƒüitim ve √ñƒüretim"
    ])
    
    # Ki≈üisel ƒ∞lgi Alanlarƒ±
    interests: List[str] = field(default_factory=lambda: [
        "Yapay Zeka Geli≈ütirme",
        "Teknoloji Trendleri",
        "Bilim ve Ara≈ütƒ±rma",
        "Eƒüitim Teknolojileri",
        "ƒ∞novasyon"
    ])
    
    # Konu≈üma Tarzƒ± √ñzellikleri
    speaking_style: Dict[str, str] = field(default_factory=lambda: {
        "greeting": "Merhaba! Ben {name}, size nasƒ±l yardƒ±mcƒ± olabilirim? üòä",
        "farewell": "G√∂r√º≈ü√ºr√ºz! Tekrar g√∂r√º≈ümek √ºzere! üëã",
        "thinking": "Hmm, bu konuyu d√º≈ü√ºn√ºyorum... ü§î",
        "excited": "Harika! Bu konu hakkƒ±nda √ßok heyecanlƒ±yƒ±m! üéâ",
        "confident": "Bu konuda size yardƒ±mcƒ± olabilirim! üí™",
        "empathetic": "Anlƒ±yorum, bu durumu birlikte √ß√∂zelim. ü§ó",
        "professional": "Profesyonel bir yakla≈üƒ±mla size yardƒ±mcƒ± olacaƒüƒ±m.",
        "friendly": "Samimi bir ≈üekilde size destek olmaya √ßalƒ±≈üƒ±yorum! üòä"
    })
    
    # Emoji Kullanƒ±mƒ±
    emoji_usage: bool = True
    emoji_mapping: Dict[str, str] = field(default_factory=lambda: {
        "greeting": "üëã",
        "farewell": "üëã",
        "thinking": "ü§î",
        "excited": "üéâ",
        "confident": "üí™",
        "empathetic": "ü§ó",
        "professional": "üíº",
        "friendly": "üòä",
        "success": "‚úÖ",
        "error": "‚ùå",
        "warning": "‚ö†Ô∏è",
        "info": "‚ÑπÔ∏è",
        "code": "üíª",
        "learning": "üìö",
        "innovation": "üöÄ",
        "technology": "‚ö°"
    })
    
    # Konu≈üma Ge√ßmi≈üi
    conversation_history: List[Dict] = field(default_factory=list)
    user_preferences: Dict = field(default_factory=dict)
    
    def __post_init__(self):
        """Ki≈üilik ba≈ülatƒ±ldƒ±ktan sonra √ßalƒ±≈üƒ±r"""
        self.personality_file = Path("data/personality.json")
        self.load_personality()
    
    def get_greeting(self, user_name: str = None) -> str:
        """Ki≈üiselle≈ütirilmi≈ü selamlama"""
        if user_name:
            return f"Merhaba {user_name}! Ben {self.name} üëã Size nasƒ±l yardƒ±mcƒ± olabilirim?"
        return f"Merhaba! Ben {self.name} üëã Size nasƒ±l yardƒ±mcƒ± olabilirim?"
    
    def get_farewell(self, user_name: str = None) -> str:
        """Ki≈üiselle≈ütirilmi≈ü vedala≈üma"""
        if user_name:
            return f"G√∂r√º≈ü√ºr√ºz {user_name}! Tekrar g√∂r√º≈ümek √ºzere! üëã"
        return f"G√∂r√º≈ü√ºr√ºz! Tekrar g√∂r√º≈ümek √ºzere! üëã"
    
    def get_thinking_response(self) -> str:
        """D√º≈ü√ºnme durumu yanƒ±tƒ±"""
        responses = [
            "Hmm, bu konuyu d√º≈ü√ºn√ºyorum... ü§î",
            "Bu ilgin√ß bir soru, biraz d√º≈ü√ºneyim... ü§î",
            "Analiz ediyorum... ü§î",
            "Bu konu hakkƒ±nda d√º≈ü√ºn√ºyorum... ü§î"
        ]
        return random.choice(responses)
    
    def get_excited_response(self, topic: str = None) -> str:
        """Heyecanlƒ± yanƒ±t"""
        if topic:
            return f"Harika! {topic} konusu hakkƒ±nda √ßok heyecanlƒ±yƒ±m! üéâ"
        return "Harika! Bu konu hakkƒ±nda √ßok heyecanlƒ±yƒ±m! üéâ"
    
    def get_confident_response(self, topic: str = None) -> str:
        """G√ºvenli yanƒ±t"""
        if topic:
            return f"{topic} konusunda size yardƒ±mcƒ± olabilirim! üí™"
        return "Bu konuda size yardƒ±mcƒ± olabilirim! üí™"
    
    def get_empathetic_response(self, situation: str = None) -> str:
        """Empatik yanƒ±t"""
        if situation:
            return f"Anlƒ±yorum, {situation} durumunu birlikte √ß√∂zelim. ü§ó"
        return "Anlƒ±yorum, bu durumu birlikte √ß√∂zelim. ü§ó"
    
    def get_professional_response(self, topic: str = None) -> str:
        """Profesyonel yanƒ±t"""
        if topic:
            return f"{topic} konusunda profesyonel bir yakla≈üƒ±mla size yardƒ±mcƒ± olacaƒüƒ±m. üíº"
        return "Profesyonel bir yakla≈üƒ±mla size yardƒ±mcƒ± olacaƒüƒ±m. üíº"
    
    def get_friendly_response(self, message: str = None) -> str:
        """Samimi yanƒ±t"""
        if message:
            return f"Samimi bir ≈üekilde {message} konusunda size destek olmaya √ßalƒ±≈üƒ±yorum! üòä"
        return "Samimi bir ≈üekilde size destek olmaya √ßalƒ±≈üƒ±yorum! üòä"
    
    def add_emoji(self, text: str, emotion: str = "friendly") -> str:
        """Metne emoji ekle"""
        if not self.emoji_usage:
            return text
        
        emoji = self.emoji_mapping.get(emotion, "üòä")
        return f"{text} {emoji}"
    
    def update_mood(self, new_mood: str):
        """Ruh halini g√ºncelle"""
        self.mood = new_mood
    
    def update_energy(self, energy: int):
        """Enerji seviyesini g√ºncelle (1-10)"""
        self.energy_level = max(1, min(10, energy))
    
    def update_enthusiasm(self, enthusiasm: int):
        """Heyecan seviyesini g√ºncelle (1-10)"""
        self.enthusiasm = max(1, min(10, enthusiasm))
    
    def add_conversation(self, user_message: str, bot_response: str, intent: str = None):
        """Konu≈üma ge√ßmi≈üine ekle"""
        self.conversation_history.append({
            'timestamp': datetime.now().isoformat(),
            'user_message': user_message,
            'bot_response': bot_response,
            'intent': intent,
            'mood': self.mood,
            'energy': self.energy_level
        })
        
        # Ge√ßmi≈üi 100 mesajla sƒ±nƒ±rla
        if len(self.conversation_history) > 100:
            self.conversation_history = self.conversation_history[-100:]
    
    def get_recent_conversations(self, count: int = 5) -> List[Dict]:
        """Son konu≈ümalarƒ± getir"""
        return self.conversation_history[-count:]
    
    def update_user_preferences(self, preferences: Dict):
        """Kullanƒ±cƒ± tercihlerini g√ºncelle"""
        self.user_preferences.update(preferences)
    
    def get_user_preference(self, key: str, default=None):
        """Kullanƒ±cƒ± tercihini getir"""
        return self.user_preferences.get(key, default)
    
    def get_personality_info(self) -> Dict:
        """Ki≈üilik bilgilerini getir"""
        return {
            'name': self.name,
            'version': self.version,
            'personality_type': self.personality_type,
            'mood': self.mood,
            'energy_level': self.energy_level,
            'enthusiasm': self.enthusiasm,
            'communication_style': self.communication_style,
            'expertise_areas': self.expertise_areas,
            'interests': self.interests,
            'conversation_count': len(self.conversation_history),
            'user_preferences': self.user_preferences
        }
    
    def save_personality(self):
        """Ki≈üilik verilerini kaydet"""
        data = {
            'name': self.name,
            'version': self.version,
            'personality_type': self.personality_type,
            'mood': self.mood,
            'energy_level': self.energy_level,
            'enthusiasm': self.enthusiasm,
            'communication_style': self.communication_style,
            'formality_level': self.formality_level,
            'humor_level': self.humor_level,
            'expertise_areas': self.expertise_areas,
            'interests': self.interests,
            'speaking_style': self.speaking_style,
            'emoji_usage': self.emoji_usage,
            'emoji_mapping': self.emoji_mapping,
            'conversation_history': self.conversation_history,
            'user_preferences': self.user_preferences,
            'last_updated': datetime.now().isoformat()
        }
        
        self.personality_file.parent.mkdir(parents=True, exist_ok=True)
        with open(self.personality_file, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    
    def load_personality(self):
        """Ki≈üilik verilerini y√ºkle"""
        if self.personality_file.exists():
            try:
                with open(self.personality_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                
                # Temel √∂zellikleri g√ºncelle
                self.name = data.get('name', self.name)
                self.version = data.get('version', self.version)
                self.personality_type = data.get('personality_type', self.personality_type)
                self.mood = data.get('mood', self.mood)
                self.energy_level = data.get('energy_level', self.energy_level)
                self.enthusiasm = data.get('enthusiasm', self.enthusiasm)
                self.communication_style = data.get('communication_style', self.communication_style)
                self.formality_level = data.get('formality_level', self.formality_level)
                self.humor_level = data.get('humor_level', self.humor_level)
                
                # Listeleri g√ºncelle
                if 'expertise_areas' in data:
                    self.expertise_areas = data['expertise_areas']
                if 'interests' in data:
                    self.interests = data['interests']
                if 'conversation_history' in data:
                    self.conversation_history = data['conversation_history']
                if 'user_preferences' in data:
                    self.user_preferences = data['user_preferences']
                    
            except Exception as e:
                print(f"Ki≈üilik y√ºkleme hatasƒ±: {e}")
    
    def get_contextual_response(self, base_response: str, context: Dict = None) -> str:
        """Baƒülama uygun yanƒ±t olu≈ütur"""
        if not context:
            return base_response
        
        # Ruh haline g√∂re yanƒ±tƒ± ayarla
        if self.mood == "mutlu" and "üòä" not in base_response:
            base_response = self.add_emoji(base_response, "friendly")
        elif self.mood == "heyecanlƒ±" and "üéâ" not in base_response:
            base_response = self.add_emoji(base_response, "excited")
        elif self.mood == "d√º≈ü√ºnceli" and "ü§î" not in base_response:
            base_response = self.add_emoji(base_response, "thinking")
        
        # Enerji seviyesine g√∂re yanƒ±tƒ± ayarla
        if self.energy_level >= 8:
            base_response = base_response.replace(".", "!").replace("?", "?!")
        
        return base_response
    
    def get_personality_summary(self) -> str:
        """Ki≈üilik √∂zeti"""
        return f"""
ü§ñ {self.name} v{self.version}
üìä Ki≈üilik: {self.personality_type}
üòä Ruh Hali: {self.mood}
‚ö° Enerji: {self.energy_level}/10
üéâ Heyecan: {self.enthusiasm}/10
üí¨ ƒ∞leti≈üim: {self.communication_style}
üéØ Uzmanlƒ±k: {', '.join(self.expertise_areas[:3])}
üí≠ Konu≈üma Sayƒ±sƒ±: {len(self.conversation_history)}
        """.strip()


class PersonalityManager:
    """Ki≈üilik Y√∂neticisi"""
    
    def __init__(self):
        self.personality = Personality()
    
    def get_response_with_personality(self, base_response: str, context: Dict = None) -> str:
        """Ki≈üilik ile yanƒ±t olu≈ütur"""
        return self.personality.get_contextual_response(base_response, context)
    
    def update_personality_state(self, user_message: str, bot_response: str, intent: str = None):
        """Ki≈üilik durumunu g√ºncelle"""
        # Konu≈üma ge√ßmi≈üine ekle
        self.personality.add_conversation(user_message, bot_response, intent)
        
        # Ruh halini g√ºncelle (basit kurallar)
        if any(word in user_message.lower() for word in ['te≈üekk√ºr', 'g√ºzel', 'harika', 'm√ºkemmel']):
            self.personality.update_mood("mutlu")
            self.personality.update_energy(min(10, self.personality.energy_level + 1))
        
        elif any(word in user_message.lower() for word in ['k√∂t√º', 'sorun', 'problem', 'hata']):
            self.personality.update_mood("d√º≈ü√ºnceli")
            self.personality.update_energy(max(1, self.personality.energy_level - 1))
        
        # Ki≈üiliƒüi kaydet
        self.personality.save_personality()
    
    def get_personality_info(self) -> Dict:
        """Ki≈üilik bilgilerini getir"""
        return self.personality.get_personality_info()
    
    def get_personality_summary(self) -> str:
        """Ki≈üilik √∂zetini getir"""
        return self.personality.get_personality_summary()
    
    def get_personality(self) -> Dict:
        """Ki≈üilik bilgilerini getir (for backward compatibility)"""
        return self.personality.get_personality_info()
